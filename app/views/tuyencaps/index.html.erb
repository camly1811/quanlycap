<!DOCTYPE html>
<html>
<head>
  <title>Tuyến Cap</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <%= csrf_meta_tags %>
  <style>
    #map { height: 93vh; }
    .controls {
      width: 13%;
      height: 45%;
      bottom: 50px;
      right: 4px;
    }
    .form-group select {
      border: 2px solid #ced4da;
      border-radius: 2px;
      height: 41px;
      width: 100%;
    }
    h5 { text-align: center; }
    #tuyen-cap-form-container {
      display: none; /* Ẩn khung form khi trang tải */
    }
  </style>
</head>
<body>
<div class="contai">
  <div class="map-container">
    <div id="map"></div>
  </div>
  <div class="controls-container">
  </div>
</div>
<%= render "control" %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const createNewBtn = document.getElementById('create-new-btn');
      const formContainer = document.getElementById('tuyen-cap-form-container');
      const cancelBtn = document.getElementById('hide-route');

      createNewBtn.addEventListener('click', function() {
        formContainer.style.display = formContainer.style.display === 'block' ? 'none' : 'block';
      });

      cancelBtn.addEventListener('click', function() {
        formContainer.style.display = 'none'; // Ẩn khung form
      });
    });

    mapboxgl.accessToken = 'pk.eyJ1IjoibHludGMiLCJhIjoiY2x4M2R6ajdsMHQ0ejJub21xcnMzdWJqNSJ9.nFYWpY_vjwZcPAvMeZAoKw';
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [108.218763, 16.0750095407], // Default center
      zoom: 16
    });

    <% @bes.each do |be| %>
      var el = document.createElement('div');
      el.className = 'map-marker';
      var iconClass = '';
      switch ('<%= be.loaibe %>') {
        case 'Bể cáp 1 đan':
          iconClass = 'fa-solid'; // Set appropriate icon class for 'Hố ga'
          el.className += ' rectangular-marker'; // Add rectangular class
          break;
        case 'Bể cáp 2 đan':
          iconClass = 'fa-solid fa-minus'; // Updated icon class for 'Bể cáp 2 đan'
          el.className += ' rectangular-marker'; // Add rectangular class
          break;
        case 'Hố ga':
          iconClass = 'fa-regular'; // Changed to 'fa-regular' as per your request
          break;
        default:
          iconClass = 'fa-solid fa-circle'; // Default icon for unknown types
      }
      el.innerHTML = `<i class="${iconClass}"></i>`;

      var marker = new mapboxgl.Marker({ element: el })
        .setLngLat([<%= be.longitude %>, <%= be.latitude %>])
        .addTo(map)
        // .setPopup(new mapboxgl.Popup({ offset: 25 }).setText('<%= be.id %>'))
        .getElement().addEventListener('click', function() {
          var beId = '<%= be.id %>';
          var coord = [<%= be.longitude %>, <%= be.latitude %>];

          if (!selectedBEs.includes(beId)) {
            selectedBEs.push(beId);
            coordinates.push(coord);

            if (coordinates.length > 1) {
              if (map.getLayer('route')) {
                map.getSource('route').setData({
                  'type': 'Feature',
                  'geometry': {
                    'type': 'LineString',
                    'coordinates': coordinates
                  }
                });
              } else {
                map.addLayer({
                  'id': 'route',
                  'type': 'line',
                  'source': {
                    'type': 'geojson',
                    'data': {
                      'type': 'Feature',
                      'geometry': {
                        'type': 'LineString',
                        'coordinates': coordinates
                      }
                    }
                  },
                  'layout': {
                    'line-join': 'round',
                    'line-cap': 'round'
                  },
                  'paint': {
                    'line-color': '#888',
                    'line-width': 8
                  }
                });
              }
            }
            document.getElementById('be-ids-field').value = selectedBEs.join(',');
          } else {
            selectedBEs.splice(selectedBEs.indexOf(beId), 1);
            coordinates = coordinates.filter(coord => coord.toString() !== coord.toString());

            if (coordinates.length > 0) {
              map.getSource('route').setData({
                'type': 'Feature',
                'geometry': {
                  'type': 'LineString',
                  'coordinates': coordinates
                }
              });
            } else {
              map.removeLayer('route');
              map.removeSource('route');
            }
            document.getElementById('be-ids-field').value = selectedBEs.join(',');
          }
        });
    <% end %>
    var coordinates = [];
    var selectedBEs = [];
    var tuyencapsData = [];
    var currentTuyencapId = null;
    
    function updateRouteCount() {
      const routeCount = tuyencapsData.length;
      document.getElementById('route-count').textContent = routeCount;
    }

    function fetchTuyencaps() {
      fetch('<%= tuyencaps_path(format: :json) %>')
        .then(response => response.json())
        .then(data => {
          tuyencapsData = data; // Store data for later use
          // data.forEach(tuyencap => {
          //   // Lấy tọa độ từ các BE trong tuyencap
          //   var tuyencapCoordinates = tuyencap.tuyencap_bes.flatMap(tuyencap_be => [
          //     [tuyencap_be.be_id_dau.longitude, tuyencap_be.be_id_dau.latitude],
          //     [tuyencap_be.be_id_cuoi.longitude, tuyencap_be.be_id_cuoi.latitude]
          //   ]);

          //   if (tuyencapCoordinates.length > 1) {
          //     map.addLayer({
          //       'id': 'route-' + tuyencap.id,
          //       'type': 'line',
          //       'source': {
          //         'type': 'geojson',
          //         'data': {
          //           'type': 'Feature',
          //           'geometry': {
          //             'type': 'LineString',
          //             'coordinates': tuyencapCoordinates
          //           }
          //         }
          //       },
          //       'layout': {
          //         'line-join': 'round',
          //         'line-cap': 'round'
          //       },
          //       'paint': {
          //         'line-color': '#888',
          //         'line-width': 8
          //       }
          //     });

          //     // Add click event listener for the route
          //     map.on('click', 'route-' + tuyencap.id, function (e) {
          //       showPopup(e, tuyencap);
          //     });

          //     // Change cursor to pointer on hover
          //     map.on('mouseenter', 'route-' + tuyencap.id, function () {
          //       map.getCanvas().style.cursor = 'pointer';
          //     });

          //     // Change cursor back on mouseleave
          //     map.on('mouseleave', 'route-' + tuyencap.id, function () {
          //       map.getCanvas().style.cursor = '';
          //     });
          //   }
          // });
          updateRouteCount();
        })
        .catch(error => console.error('Error fetching Tuyencaps:', error));
    }

    function hideRoute(tuyencapId) {
      map.getStyle().layers.forEach(layer => {
        if (layer.id.startsWith('route-' + tuyencapId)) {
          map.removeLayer(layer.id);
          map.removeSource(layer.id);
        }
      });
    }
    function showPopup(e, tuyencap) {
      // Tạo nội dung cho popup với nút xóa
      var content = `
        <div style="text-align: center;">
          <h5>${tuyencap.ten_tuyen}</h5>
        </div>
        <p>Bắt đầu: ${tuyencap.diembatdau || 'N/A'}</p>
        <p>Kết thúc: ${tuyencap.diemketthuc || 'N/A'}</p>
        <p>Phân loại: ${tuyencap.phanloai || 'N/A'}</p>
        <p>Đơn vị quản lý: ${tuyencap.dvquanly || 'N/A'}</p>
        <div style="text-align: center;">
          <button id="delete-tuyencap" class="delete-btn" data-id="${tuyencap.id}">Xóa Tuyến Cáp</button>
        </div>
      `;

      // Tạo và hiển thị popup
      var popup = new mapboxgl.Popup()
        .setLngLat(e.lngLat)
        .setHTML(content)
        .addTo(map);

      // Thêm sự kiện cho nút xóa
      document.getElementById('delete-tuyencap').addEventListener('click', function() {
        var tuyencapId = this.getAttribute('data-id');

        // Xác nhận xóa
        if (confirm('Bạn có muốn xóa toàn bộ tuyến cáp này hay không?')) {
          // Gửi yêu cầu xóa đến máy chủ
          fetch(`/tuyencaps/${tuyencapId}`, {
            method: 'DELETE',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            }
          })
          .then(response => {
            if (response.ok) {
              // Ẩn đoạn đường
              hideRoute(tuyencapId);
              
              // Ẩn nút tương ứng trong danh sách
              const buttonToHide = document.querySelector(`button[onclick="showRoute(${tuyencapId})"]`);
              if (buttonToHide) {
                buttonToHide.style.display = 'none';
              }

              // Cập nhật số lượng trong nút "Hiển thị"
              const routeCountElement = document.getElementById('route-count');
              const currentCount = parseInt(routeCountElement.textContent, 10);
              routeCountElement.textContent = currentCount > 0 ? currentCount - 1 : 0; // Trừ đi 1 nếu lớn hơn 0

              // Ẩn popup
              popup.remove();
            } else {
              throw new Error('Lỗi khi xóa tuyencap');
            }
          })
          .catch(error => {
            console.error('Lỗi:', error);
            alert('Có lỗi xảy ra khi xóa tuyến cáp.');
          });
        }
      });
    }

    function showRoute(tuyencapId) {
      currentTuyencapId = tuyencapId;

      // Xóa các đường đi hiện tại nếu có
      map.getStyle().layers.forEach(layer => {
        if (layer.id.startsWith('route-')) {
          map.removeLayer(layer.id);
          map.removeSource(layer.id);
        }
      });

      const tuyencap = tuyencapsData.find(tc => tc.id === tuyencapId);
      if (tuyencap) {
        var tuyencapCoordinates = [];
        
        // Chỉ vẽ những đoạn nối đã tồn tại, không tự động kết nối các điểm BE
        tuyencap.tuyencap_bes.forEach(tuyencap_be => {
          // Đảm bảo rằng đoạn nối này có đủ tọa độ để hiển thị
          var coordDau = [tuyencap_be.be_id_dau.longitude, tuyencap_be.be_id_dau.latitude];
          var coordCuoi = [tuyencap_be.be_id_cuoi.longitude, tuyencap_be.be_id_cuoi.latitude];

          tuyencapCoordinates.push([coordDau, coordCuoi]); // Chỉ nối BE đầu và BE cuối cho mỗi đường nối
        });

        // Vẽ từng đoạn nối
        tuyencapCoordinates.forEach((lineCoords, index) => {
          var routeId = 'route-' + tuyencapId + '-' + index;

          map.addLayer({
            'id': routeId,
            'type': 'line',
            'source': {
              'type': 'geojson',
              'data': {
                'type': 'Feature',
                'geometry': {
                  'type': 'LineString',
                  'coordinates': lineCoords // Chỉ vẽ đoạn kết nối hiện có
                }
              }
            },
            'layout': {
              'line-join': 'round',
              'line-cap': 'round'
            },
            'paint': {
              'line-color': '#888',
              'line-width': 8
            }
          });

          // Thêm sự kiện nhấp chuột cho từng đoạn nối
          map.on('click', routeId, function (e) {
            showPopup(e, tuyencap);
          });

          // Thay đổi con trỏ thành pointer khi hover vào đoạn nối
          map.on('mouseenter', routeId, function () {
            map.getCanvas().style.cursor = 'pointer';
          });

          // Đổi lại con trỏ khi không hover
          map.on('mouseleave', routeId, function () {
            map.getCanvas().style.cursor = '';
          });
        });
      }
    }

    fetchTuyencaps();

    // Add event listener for the "Hide Routes" button
    document.getElementById('hide-routes').addEventListener('click', function() {
      // Iterate over all layers and hide those with IDs starting with 'route-'
      map.getStyle().layers.forEach(layer => {
        if (layer.id.startsWith('route-')) {
          map.setLayoutProperty(layer.id, 'visibility', 'none');
        }
      });
    });
    
    function showAllRoutes() {
      // Hiện danh sách tuyến cáp
      const tuyenCapList = document.getElementById('tuyen-cap-list');
      tuyenCapList.style.display = 'block'; // Hiện danh sách tuyến cáp

      // Ẩn nút "Hiển thị"
      const showAllRoutesButton = document.getElementById('show-all-routes');
      showAllRoutesButton.style.display = 'none';

      // Ẩn nút "Tạo mới"
      const createNewButton = document.getElementById('create-new-btn');
      createNewButton.style.display = 'none';

      // Hiển thị các nút khác
      const deleteButton = document.getElementById('delete-changes-btn');
      const saveButton = document.getElementById('save-changes-btn');
      const hideRoutesButton = document.getElementById('hide-routes');

      deleteButton.style.display = 'block';
      saveButton.style.display = 'block';
      hideRoutesButton.style.display = 'block';
    }

    function closeList() {
      // Ẩn danh sách tuyến cáp
      const tuyenCapList = document.getElementById('tuyen-cap-list');
      tuyenCapList.style.display = 'none';

      // Hiển thị lại nút "Tạo mới" và "Hiển thị"
      const createNewButton = document.getElementById('create-new-btn');
      createNewButton.style.display = 'block';

      const showAllRoutesButton = document.getElementById('show-all-routes');
      showAllRoutesButton.style.display = 'block';

      // Ẩn các nút
      const deleteButton = document.getElementById('delete-changes-btn');
      const saveButton = document.getElementById('save-changes-btn');
      const hideRoutesButton = document.getElementById('hide-routes');

      deleteButton.style.display = 'none';
      saveButton.style.display = 'none';
      hideRoutesButton.style.display = 'none';

      // Ẩn tất cả các tuyến cáp
      map.getStyle().layers.forEach(layer => {
        if (layer.id.startsWith('route-')) {
          map.setLayoutProperty(layer.id, 'visibility', 'none');
        }
      });
    }
    document.getElementById('create-tuyencap').addEventListener('click', function(event) {
      var tenTuyen = document.getElementById('tuyen-cap-ten').value.trim();
      var diembatdau_cap = document.getElementById('diembatdau_cap').value.trim();
      var diemketthuc_cap = document.getElementById('diemketthuc_cap').value.trim();
      var phanloai = document.getElementById('phanloai').value.trim();
      var dvquanly = document.getElementById('dvquanly').value.trim();

      if (coordinates.length <= 1) {
        alert('Vui lòng nhấn vào các bes trên bản đồ để có thể tạo ra tuyến cap!');
        event.preventDefault(); 
      } else if (!tenTuyen) {
        alert('Vui lòng nhập tên tuyến!');
        event.preventDefault();
      } else if (!diembatdau_cap) {
        alert('Vui lòng nhập tên điểm bắt đầu!');
        event.preventDefault();
      } else if (!diemketthuc_cap) {
        alert('Vui lòng nhập tên điểm kết thúc!');
        event.preventDefault();
      } else if (!phanloai) {
        alert('Vui lòng chọn phân loại!');
        event.preventDefault();
      } else if (!dvquanly) {
        alert('Vui lòng chọn đơn vị quản lý!');
        event.preventDefault();
      }
    });

    document.getElementById('tuyencap-form').addEventListener('submit', function(event) {
      event.preventDefault();
      var formData = new FormData(this);    
      fetch(this.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Xóa đường cũ nếu có
          if (map.getLayer('route')) {
            map.removeLayer('route');
            map.removeSource('route');
          }

          // Lấy tọa độ từ tuyencap mới tạo
          var newCoordinates = [];
          data.tuyencap.tuyencap_bes.forEach(tuyencap_be => {
            // Đảm bảo bạn lấy đúng tọa độ từ các BE
            newCoordinates.push([tuyencap_be.be_id_dau.longitude, tuyencap_be.be_id_dau.latitude]);
            newCoordinates.push([tuyencap_be.be_id_cuoi.longitude, tuyencap_be.be_id_cuoi.latitude]);
          });

          // Thêm đường mới vào bản đồ
          if (newCoordinates.length > 1) {
            map.addLayer({
              'id': 'route',
              'type': 'line',
              'source': {
                'type': 'geojson',
                'data': {
                  'type': 'Feature',
                  'geometry': {
                    'type': 'LineString',
                    'coordinates': newCoordinates
                  }
                }
              },
              'layout': {
                'line-join': 'round',
                'line-cap': 'round'
              },
              'paint': {
                'line-color': '#888',
                'line-width': 8
              }
            });
          }
          alert(data.message);
          // Reset các trường về placeholder
          this.reset();      
          window.location.reload(); // Bạn có thể bỏ dòng này nếu không muốn reload
        } else {
          alert(data.message);
        }
      })
      .catch(error => console.error('Error:', error));
    });

    document.getElementById('cancel-route').addEventListener('click', function() {
      selectedBEs = [];
      coordinates = [];
      if (map.getLayer('route')) {
        map.removeLayer('route');
        map.removeSource('route');
      }
      
      // Xóa dữ liệu trong các trường nhập liệu
      document.getElementById('tuyen-cap-ten').value = '';
      document.getElementById('diembatdau_cap').value = '';
      document.getElementById('diemketthuc_cap').value = '';
      document.getElementById('be-ids-field').value = '';

      // Đặt lại các trường select về giá trị mặc định
      document.querySelector('#tuyen-cap-form-container select[name="tuyen_cap[phanloai]"]').value = ""; // Chọn "Chọn phân loại"
      document.querySelector('#tuyen-cap-form-container select[name="tuyen_cap[dvquanly]"]').value = ""; // Chọn "Chọn Đơn Vị Quản Lý"
    });

    document.getElementById('save-changes-btn').addEventListener('click', function() {
      if (!currentTuyencapId) {
        alert('Vui lòng chọn một tuyến cap trước khi chỉnh sửa!');
        return;
      }

      if (coordinates.length < 2) {
        alert('Vui lòng chọn ít nhất hai BEs để thêm đường nối!');
        return;
      }

      // Chuẩn bị dữ liệu gửi đi
      var formData = new FormData();
      formData.append('be_ids', selectedBEs.join(','));

      // Gửi yêu cầu thêm kết nối
      fetch(`/tuyencaps/${currentTuyencapId}/add_connections`, {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert(data.message);
          // Có thể gọi lại hàm fetchTuyencaps để làm mới dữ liệu
           window.location.reload(); 
        } else {
          alert(data.message);
        }
      })
      .catch(error => console.error('Error:', error));
    });

    document.getElementById('delete-changes-btn').addEventListener('click', function() {
      if (!currentTuyencapId) {
        alert('Vui lòng chọn một tuyến cap trước khi xóa đường nối!');
        return;
      }

      if (selectedBEs.length < 2) {
        alert('Vui lòng chọn ít nhất hai BEs để xóa đường nối!');
        return;
      }

      // Hiển thị thông báo xác nhận
      var confirmation = confirm('Bạn có chắc chắn muốn xóa đường nối giữa các BEs này không?');
      if (!confirmation) {
        return; // Nếu người dùng nhấn "Cancel", không thực hiện hành động xóa
      }

      // Chuẩn bị dữ liệu gửi đi
      var formData = new FormData();
      formData.append('be_ids', selectedBEs.join(','));

      // Gửi yêu cầu xóa kết nối
      fetch(`/tuyencaps/${currentTuyencapId}/remove_connections`, {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert(data.message);
        } else {
          alert(data.message);
        }
      })
      .catch(error => console.error('Error:', error));
    });
    
    function zoomIn() {
      map.zoomIn();
    }
    function zoomOut() {
      map.zoomOut();
    }
  </script>
</body>
</html>
