<div class="container">
  <h2>QUẢN LÝ NGƯỜI DÙNG</h2>

  <div class="button-container">
    <%= link_to new_admin_user_path, class: "primary", title: "Add New Data" do %>
      <svg viewBox="0 0 512 512" width="16" title="plus-circle">
        <path d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"/>
      </svg>
    <% end %>
  </div>

  <ul class="responsive-table">
    <!-- Table Header -->
    <li class="table-header">
      <div class="col col-2" data-column="name">Họ và tên</div>
      <div class="col col-2" data-column="email">Email</div>
      <div class="col col-3" data-column="gender">Giới tính</div>
      <div class="col col-4" data-column="phone">Số điện thoại</div>
      <div class="col col-5" data-column="address">Địa chỉ</div>
      <div class="col col-6" data-column="role">Vai trò</div>
      <div class="col col-1"></div>
    </li>

    <!-- Loop over users to create table rows -->
    <% @users.each do |user| %>
      <li class="table-row">
        <div class="col col-2 title_col" data-label="Full Name"><%= link_to user.full_name %></div>
        <div class="col col-2 title_col" data-label="Email"><%= link_to user.email %></div>
        <div class="col col-3 title_col" data-label="Gender"><%= link_to user.gender == "male" ? "Nam" : user.gender == "female" ? "Nữ" : "Khác" %></div>
        <div class="col col-4 title_col" data-label="Phone"><%= link_to user.phone %></div>
        <div class="col col-5 title_col" data-label="Address"><%= link_to user.address %></div>
        <div class="col col-6 title_col" data-label="Role"><%= link_to user.roles.map { |role| { 1 => 'Quản trị viên', 2 => 'Người dùng', 3 => 'Người điều hành' }[role.id] }.join(', ') %></div>
        <div class="col col-1 act_submit" data-label="Actions">
          <%= button_to admin_user_path(user), method: :delete, data: { confirm: 'Bạn có chắc muốn xóa người dùng này?' }, class: "btn btn-outline-danger" do %>
            <i class="fas fa-trash-alt"></i> <!-- Icon xóa từ FontAwesome -->
          <% end %>
        </div>
      </li>
    <% end %>
  </ul>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // Lưu trữ trạng thái sắp xếp của các cột
  const sortState = {
    name: 'asc',    // 'asc' là sắp xếp tăng dần, 'desc' là sắp xếp giảm dần
    email: 'asc',
    gender: 'asc',
    phone: 'asc',
    address: 'asc',
    role: 'asc',
  };

  // Lấy tất cả các cột tiêu đề
  const headers = document.querySelectorAll(".table-header .col");

  headers.forEach(header => {
    header.addEventListener("click", function() {
      const column = header.getAttribute("data-column");
      const rows = Array.from(document.querySelectorAll(".table-row"));
      let sortedRows;

      // Sắp xếp các dòng theo cột và trạng thái sắp xếp
      if (column === "name") {
        sortedRows = sortColumn(rows, column, sortState[column]);
        sortState[column] = (sortState[column] === 'asc') ? 'desc' : 'asc';
      } else if (column === "email") {
        sortedRows = sortColumn(rows, column, sortState[column]);
        sortState[column] = (sortState[column] === 'asc') ? 'desc' : 'asc';
      } else if (column === "gender") {
        sortedRows = sortColumn(rows, column, sortState[column]);
        sortState[column] = (sortState[column] === 'asc') ? 'desc' : 'asc';
      } else if (column === "phone") {
        sortedRows = sortColumn(rows, column, sortState[column]);
        sortState[column] = (sortState[column] === 'asc') ? 'desc' : 'asc';
      } else if (column === "address") {
        sortedRows = sortColumn(rows, column, sortState[column]);
        sortState[column] = (sortState[column] === 'asc') ? 'desc' : 'asc';
      } else if (column === "role") {
        sortedRows = sortColumn(rows, column, sortState[column]);
        sortState[column] = (sortState[column] === 'asc') ? 'desc' : 'asc';
      }

      // Đưa các dòng đã sắp xếp vào lại bảng
      const tableBody = document.querySelector(".responsive-table");
      sortedRows.forEach(row => tableBody.appendChild(row));
    });
  });

  // Hàm sắp xếp cột
  function sortColumn(rows, column, order) {
    return rows.sort((a, b) => {
      const valueA = getColumnValue(a, column);
      const valueB = getColumnValue(b, column);

      if (order === 'asc') {
        return valueA > valueB ? 1 : (valueA < valueB ? -1 : 0);
      } else {
        return valueA < valueB ? 1 : (valueA > valueB ? -1 : 0);
      }
    });
  }

  // Hàm lấy giá trị của cột
  function getColumnValue(row, column) {
    switch (column) {
      case 'name':
        return row.querySelector('.col-2').innerText.trim();
      case 'email':
        return row.querySelector('.col-2').innerText.trim();
      case 'gender':
        return row.querySelector('.col-3').innerText.trim();
      case 'phone':
        return row.querySelector('.col-4').innerText.trim();
      case 'address':
        return row.querySelector('.col-5').innerText.trim();
      case 'role':
        return row.querySelector('.col-6').innerText.trim();
      default:
        return '';
    }
  }
});
</script>
<style>
.button-container {
  width: 100%;
  box-sizing: border-box;
  display: flex;
  justify-content: flex-end;
  margin-bottom: 15px;
  margin-left: 15px;
}
.button-container button {
  font-family: inherit;
  font-size: inherit;
  color: #ffffff;
  padding: 10px;
  border: 0;
  margin: 0;
  outline: 0;
  border-radius: 3px;
  transition: background-color 225ms ease-out;
}

.primary {
  background-color: #147eff;
  color: white;
  padding: 10px;
  border-radius: 5px;
  text-decoration: none; /* Đảm bảo không có gạch chân */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  border: none;
}

.primary:hover {
  background-color: lighten(#147eff, 10%);
}

.act_submit a{

}
.title_col a{
  color: black;
}
body {
  font-family: 'Lato', sans-serif;
}

.container {
  max-width: 1360px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 10px;
  padding-right: 10px;
}

h2 {
  font-size: 26px;
  margin: 20px 0;
  text-align: center;
}

h2 small {
  font-size: 0.5em;
}

.responsive-table {
  list-style: none;
  padding: 0;
  margin: 0;
}

.table-header {
  background-color: #95A5A6;
  display: flex;
  justify-content: space-between;
  font-size: 16px;
  text-transform: uppercase;
  letter-spacing: 0.03em;
  padding: 15px;
  text-align: center; /* Center the text in the header */
  font-weight: bold;
}

.table-header .col:hover {
  color: #0056b3;  /* Màu chữ khi hover */
}

.table-row {
  background-color: #ffffff;
  box-shadow: 0px 0px 9px 0px rgba(0, 0, 0, 0.1);
  display: flex;
  justify-content: space-between;
  padding: 15px;
  margin-bottom: 10px;
}

.col {
  display: flex;
  justify-content: space-between;
  padding: 5px;
}

.col-1 {
  flex-basis: 15%;
}

.col-2 {
  flex-basis: 25%;
}

.col-3 {
  flex-basis: 15%;
}

.col-4 {
  flex-basis: 15%;
}

.col-5 {
  flex-basis: 15%;
}

.col-6 {
  flex-basis: 10%;
}

.col-7 {
  flex-basis: 10%;
}

/* Center text in table header */
.table-header .col {
  text-align: center;
}

@media all and (max-width: 767px) {
  .table-header {
    display: none;
  }
  .table-row {
    display: block;
    margin-bottom: 15px;
  }
  .col {
    flex-basis: 100%;
    display: block;
    padding: 10px 0;
    border-top: 1px solid #ddd;
  }
  .col:before {
    content: attr(data-label);
    font-weight: bold;
    color: #6C7A89;
    display: inline-block;
    width: 50%;
    text-align: left;
    padding-right: 10px;
  }
  .col-1:before {
    content: "Full Name";
  }
  .col-2:before {
    content: "Email";
  }
  .col-3:before {
    content: "Gender";
  }
  .col-4:before {
    content: "Phone";
  }
  .col-5:before {
    content: "Address";
  }
  .col-6:before {
    content: "Role";
  }
  .col-7:before {
    content: "Actions";
  }
}
</style>